{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats\n",
    "np.random.seed(2020)\n",
    "\n",
    "def load_data():\n",
    "    \"\"\"Load stimulus data and binarize\n",
    "    \n",
    "    Returns:\n",
    "      stim (ndarray): stimulus data (frames, x-dim, y-dim)\n",
    "      bin_stim (ndarray) : binarized stimulus data (frames, x-dim, y-dim)\n",
    "    \"\"\"\n",
    "    \n",
    "    # load data\n",
    "    fname = 'images.npz'\n",
    "    with np.load(fname) as dobj:\n",
    "        data = dict(dobj)\n",
    "\n",
    "    stim = data['ims'].T\n",
    "\n",
    "    # get value of mean luminance \n",
    "    background = stim.mean().round()\n",
    "\n",
    "    # binarize stimulus\n",
    "    bin_stim = stim - background\n",
    "    bin_stim[bin_stim != 0] = 1 \n",
    "    \n",
    "    return stim, bin_stim\n",
    "\n",
    "def pRF_model(x0,y0,sig,im_shape=600,plot=True):\n",
    "    \"\"\"Creates 2D-gaussian population receptive field (pRF), with a centre\n",
    "    x0, y0 and a spread of sig.\n",
    "\n",
    "    Args:\n",
    "      x0 (int) : centre of gaussian in x-direction\n",
    "      y0 (int) : centre of gaussian in y-direction\n",
    "      sig (int) : spread of the gaussian\n",
    "      im_shape (int) : length of image\n",
    "      plot (bool) : if True plot pRF model\n",
    "      \n",
    "    Returns:\n",
    "      pRF (array) : 2D guassian pRF as defined in Dumoulin and Wandell (2008)\n",
    "    \"\"\"\n",
    "\n",
    "    s = np.arange(1,im_shape+1,1) # number of pixels\n",
    "    pRF = [] # initialize array of final pRF\n",
    "    \n",
    "    # calculate pRF value for each coordinate in visual space \n",
    "    for y in s:\n",
    "        for x in s:\n",
    "            g = np.exp(-((x-x0)**2 + (y-y0)**2)/(2*sig**2))\n",
    "            pRF.append(g)\n",
    "\n",
    "    pRF = np.array(pRF).reshape(im_shape,im_shape)\n",
    "    \n",
    "    if plot:\n",
    "        plt.figure()\n",
    "        plt.title('pRF model')\n",
    "        plt.xlabel('x-axis')\n",
    "        plt.ylabel('y-axis')\n",
    "        plt.imshow(pRF)\n",
    "        plt.colorbar()\n",
    "    \n",
    "    return pRF\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
